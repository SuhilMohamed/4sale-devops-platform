name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Basic validation checks
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
          requireScope: false

      - name: Check for merge conflicts
        run: |
          git config --global user.email "ci@4sale.com"
          git config --global user.name "CI Bot"
          
          # Attempt merge to check for conflicts
          if ! git merge origin/main --no-commit --no-ff; then
            echo "❌ Merge conflicts detected. Please resolve conflicts before merging."
            exit 1
          else
            echo "✅ No merge conflicts detected"
            git merge --abort
          fi

      - name: Check file sizes
        run: |
          # Check for large files (>50MB)
          find . -name "*.zip" -o -name "*.tar.gz" -o -name "*.jar" -o -name "*.war" | while read file; do
            if [ -f "$file" ] && [ $(stat -c%s "$file") -gt 52428800 ]; then
              echo "❌ Large file detected: $file ($(stat -c%s "$file") bytes)"
              echo "Please use Git LFS for large files or exclude them from the repository"
              exit 1
            fi
          done
          echo "✅ No large files detected"

  # Code quality for application changes
  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'app/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/backend/package-lock.json

      - name: Install dependencies
        run: |
          cd app/backend
          npm ci

      - name: Run linting
        run: |
          cd app/backend
          npm run lint

      - name: Run code formatting check
        run: |
          cd app/backend
          npm run format:check

      - name: Run unit tests
        run: |
          cd app/backend
          npm test

      - name: Check test coverage
        run: |
          cd app/backend
          npm run test:coverage
          
          # Extract coverage percentage
          COVERAGE=$(grep -o "Statements.*[0-9.]*%" coverage/lcov-report/index.html | grep -o "[0-9.]*%" | head -1)
          echo "Current test coverage: $COVERAGE"
          
          # Check if coverage meets minimum threshold (80%)
          COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
          if (( $(echo "$COVERAGE_NUM < 80" | bc -l) )); then
            echo "❌ Test coverage ($COVERAGE) is below minimum threshold (80%)"
            exit 1
          else
            echo "✅ Test coverage meets minimum threshold"
          fi

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=app/backend/package.json --severity-threshold=medium
        continue-on-error: true

      - name: Scan for hardcoded secrets
        run: |
          # Check for potential secrets in code
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" --include="*.js" --include="*.json" --include="*.yml" --include="*.yaml" .; then
            echo "❌ Potential hardcoded secrets detected"
            echo "Please remove secrets from code and use environment variables or secret management systems"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi

  # Infrastructure validation
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'infrastructure/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Terraform format check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Validate Terraform configurations
        run: |
          for dir in infrastructure/terraform/environments/*/; do
            echo "Validating $dir"
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

      - name: Run tfsec scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/terraform
          soft_fail: true

  # Docker build test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.changed_files, 'app/') ||
      contains(github.event.pull_request.changed_files, 'Dockerfile') ||
      contains(github.event.pull_request.changed_files, 'docker-compose')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          push: false
          tags: task-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: false
          tags: task-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          # Test that docker-compose file is valid
          docker-compose config
          
          # Start services briefly to test they come up
          docker-compose up -d
          sleep 30
          
          # Check if services are running
          docker-compose ps
          
          # Basic health checks
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          curl -f http://localhost:8080 || echo "Frontend not ready yet"
          
          # Clean up
          docker-compose down

  # Documentation check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for README updates
        run: |
          # Check if code changes require README updates
          if git diff --name-only origin/main...HEAD | grep -E "(app/|infrastructure/|k8s/)" > /dev/null; then
            if git diff --name-only origin/main...HEAD | grep -E "(README|docs/)" > /dev/null; then
              echo "✅ Documentation appears to be updated alongside code changes"
            else
              echo "⚠️ Code changes detected but no documentation updates found"
              echo "Consider updating README.md or relevant documentation"
            fi
          fi

      - name: Check for broken links in markdown
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.markdown-link-check.json'
          folder-path: 'docs/'
        continue-on-error: true

      - name: Validate markdown format
        uses: DavidAnson/markdownlint-cli2-action@v13
        with:
          globs: '**/*.md'
          config: '.markdownlint.json'
        continue-on-error: true

  # Kubernetes manifest validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'k8s/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Validate Kubernetes manifests
        run: |
          # Validate YAML syntax and Kubernetes schema
          for file in $(find k8s/ -name "*.yaml" -o -name "*.yml"); do
            echo "Validating $file"
            kubectl apply --dry-run=client --validate=true -f "$file"
          done

      - name: Run kubeval
        run: |
          # Install kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          
          # Validate manifests
          for file in $(find k8s/ -name "*.yaml" -o -name "*.yml"); do
            echo "Running kubeval on $file"
            kubeval "$file"
          done

  # Performance test
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'app/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30
          
          # Wait for application to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run basic performance tests
        run: |
          # Install hey (HTTP load testing tool)
          wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey_linux_amd64
          sudo mv hey_linux_amd64 /usr/local/bin/hey
          
          # Run performance test
          echo "Running performance test..."
          hey -n 100 -c 10 http://localhost:3000/health > performance_results.txt
          
          # Check results
          cat performance_results.txt
          
          # Extract average response time
          AVG_TIME=$(grep -o "Average:.*secs" performance_results.txt | grep -o "[0-9.]*")
          echo "Average response time: ${AVG_TIME}s"
          
          # Fail if average response time > 500ms
          if (( $(echo "$AVG_TIME > 0.5" | bc -l) )); then
            echo "❌ Average response time (${AVG_TIME}s) exceeds 500ms threshold"
            exit 1
          else
            echo "✅ Performance test passed"
          fi

      - name: Cleanup
        if: always()
        run: docker-compose down

  # Final validation summary
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: 
      - validate-pr
      - code-quality-check
      - security-scan
      - terraform-validation
      - docker-build-test
      - documentation-check
      - k8s-validation
      - performance-check
    if: always()
    steps:
      - name: Validation Summary
        run: |
          echo "## 📋 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [ "${{ needs.validate-pr.result }}" = "success" ]; then
            echo "✅ **Basic Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Basic Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.code-quality-check.result }}" = "success" ] || [ "${{ needs.code-quality-check.result }}" = "skipped" ]; then
            echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.terraform-validation.result }}" = "success" ] || [ "${{ needs.terraform-validation.result }}" = "skipped" ]; then
            echo "✅ **Infrastructure Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Infrastructure Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-build-test.result }}" = "success" ] || [ "${{ needs.docker-build-test.result }}" = "skipped" ]; then
            echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.k8s-validation.result }}" = "success" ] || [ "${{ needs.k8s-validation.result }}" = "skipped" ]; then
            echo "✅ **Kubernetes Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Kubernetes Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-check.result }}" = "success" ] || [ "${{ needs.performance-check.result }}" = "skipped" ]; then
            echo "✅ **Performance Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for merge**: All checks have passed!" >> $GITHUB_STEP_SUMMARY
