version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task-postgres
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - task-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API Service
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: task-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      LOG_LEVEL: info
      ALLOWED_ORIGINS: http://localhost:8080
      RATE_LIMIT_MAX: 1000
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "3000:3000"
    networks:
      - task-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./app/backend/logs:/app/logs

  # Frontend Service
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: task-frontend
    ports:
      - "8080:8080"
    networks:
      - task-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: task-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger Collector HTTP
      - "14250:14250"  # Jaeger Collector gRPC
      - "9411:9411"    # Zipkin compatible endpoint
    networks:
      - task-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: task-redis
    command: redis-server --requirepass redis123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - task-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: task-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - task-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: task-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - task-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Load testing with Locust
  locust:
    build:
      context: ./scripts
      dockerfile: Dockerfile.locust
    container_name: task-locust
    ports:
      - "8089:8089"
    environment:
      LOCUST_HOST: http://backend:3000
      LOCUST_USERS: 10
      LOCUST_SPAWN_RATE: 2
      LOCUST_RUN_TIME: 5m
    networks:
      - task-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./scripts:/locust
    command: ["locust", "-f", "/locust/locustfile.py", "--host", "http://backend:3000"]

networks:
  task-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
